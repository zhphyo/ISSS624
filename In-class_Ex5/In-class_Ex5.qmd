---
title: "In-class_Ex5"
author: "Flora Phyo Zin Htet"
---

```{r}
# eval = FALSE
devtools::install_github("LukeCe/spflow")
```

Next, will load spflow and other R packages into R environment

```{r}
pacman::p_load(tmap, sf, spdep, sp, Matrix, spflow, reshape2, knitr, tidyverse)
```

### Data Preparation

Before we can calibrate Spatial Econometic Interaction Model by using spflow package, there data sets are required. They are

-   a spatial weights,

-   a tibble data.frame consists of the origins, destinations, flows and distances between the origns and destinations.

-   a tibble data.frame consists of the explanatory variables.

### Building the geographic area

For the purpose of this study, URA Master Planning 2019 Planning Subzone GIS data wil be used.

In this code chunk below, MPSZ-2019 shape file will be import into R environment as a sf tibble data.frame called mpsz

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
               layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz$BUSTOP_COUNT <- length(st_intersects(mpsz, busstop))
```

```{r}
mpsz_busstop <- mpsz %>%
  filter(BUSTOP_COUNT >0)
mpsz_busstop
```

```{r}
centroids <- suppressWarnings({
  st_point_on_surface(st_geometry(mpsz_busstop))
})

```

```{r}
mpsz_nb <- list(
  "by_contiguity" = poly2nb(mpsz_busstop),
  "by_distance" = dnearneigh(centroids,
                             d1 = 0, d2 = 5000),
  "by_knn" = knn2nb(knearneigh(centroids, 3))
)
```

```{r}
mpsz_nb
```

```{r}
# eval = FALSE
write_rds(mpsz_nb, "data/rds/mpsz_nb.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

Let us retrieve by using the code chunk below

```{r}
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
```

#### Creating spflow_network-class objects

spflow_network-class is an S4 class that contains all the ifnormation on a spatial network which composed by a set of nodes that are linked by some neighbour realtion. It can be created by using spflow_network() of spflow

For our model, we choose the continguity based neighbourhood structure

```{r}
#mpsz_net <-spflow_network(
#  id_net = "sg",
#  node_neighborhood = 
#    nb2mat(mpsz_nb$by_contiguity),
#  node_data = mpsz_var,
#  node_key_column = "SZ_CODE")
#mpsz_net
```

```{r}
#mpsz_net_pairs <- spflow_network_pair(
#  id_orig_net="sg",
#  id_dest_net="sg",
#  pair_data=mpsz_flow,
#  orign_key_column = "ORIGIN_SZ",
#  dest_key_column = "DESTIN_SZ")
#mpsz_net_pairs
```

```{r}
#mpsz_multi_net <- spflow_network_multi(mpsz_net, mpsz_net_pairs)

#mpsz_multi_net
```

```{r}
# cor_formula <- log(1 + TRIPS) ~
# BUSSTOP_COUNT + 
# AGE7_12 + 
# AGE13_24 + 
# AGE25_64 + 
# SCHOOL_COUNT + 
# BUSINESS_COUNT + 
# RETAILS_COUNT +
# FINSERV_COUNT + 
# P_log(DISTANCE + 1))

#cor_mat <- pair_cor(
#  mpsz_multi_net,
#  spflow_formula = cor_formula,
#  add_lags_x = FALSE
#)

#colnames(cor_mat) <- paste0(
#  substr(
#    colnames(cor_mat),1,3), "...")

#cor_image(cor_mat)
```

### The base model

Explanatory variables use as characteristics of the origins :

```{r}
# base_mode <- spflow(
#  spflow_formula = log(1 + TRIPS)~
#   0_(BUSSTOP_COUNT +
#       AGE25_64) +
#   D_(SCHOOL_COUNT + 
#   BUSINESS_COUNT + 
#   RETAILS_COUNT + 
#   FINSERV_COUNT) +
#   P_(log(DISTANCE + 1)),
# spflow_networks = mpsz_multi_net)
#
# base_model
```

```{r}
#old_par <- par(mfrow = c(1,3),
#               mar = c(2,2,2,2))
#  spflow_moran_plots((base_model))
```

```{r}
#corr_residual <- pair_cor(base_model)
#colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
#cor_image(corr_residual)
```

```{r}
#spflow_formula <- log(1+TRIPS)~
#  spflow_formula = log(1 + TRIPS)~
#   0_(BUSSTOP_COUNT +
#       AGE25_64) +
#   D_(SCHOOL_COUNT + 
#   BUSINESS_COUNT + 
#   RETAILS_COUNT + 
#   FINSERV_COUNT) +
#   P_(log(DISTANCE + 1))
  
#model_control <- spflow_control(
#  estimation_method = "mle",
#  model = "model_1"
#)

#mle_model <- spflow(
#  spflow_formula,
#  spflow_networks = mpsz_multi_net,
#  estimation_control = model_control)

#mle_model1
```
